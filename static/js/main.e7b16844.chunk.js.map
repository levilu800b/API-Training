{"version":3,"sources":["ApiClient.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","response","status","Promise","resolve","reject","Error","statusText","authorId","this","getRequest","skip","limit","url","axios","get","then","catch","error","console","alert","App","props","state","content","author","tags","fetching","authors","lastItemIndex","pageSize","undefined","apiClient","setState","getquoteByAuthor","updateQuote","data","results","Math","floor","random","count","finally","getQuote","getAuthors","updateAuthors","map","log","name","quoteCount","id","_id","next","listAuthors","e","target","value","selectState","refreshQuote","i","style","backgroundColor","onClick","selectAuthor","join","disabled","makeAuthorTable","refreshAuthors","onChange","refreshPagination","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7b16844.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport class ApiClient {\r\n\r\n  status(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n      return Promise.resolve(response)\r\n    } else {\r\n      return Promise.reject(new Error(response.statusText))\r\n    }\r\n  }\r\n\r\n  getquoteByAuthor(authorId) {\r\n    return this.getRequest(`https://api.quotable.io/quotes?authorId=${authorId}`)\r\n  }\r\n\r\n  getAuthors(skip, limit) {\r\n    return this.getRequest(`https://api.quotable.io/authors?skip=${skip}&limit=${limit}`)\r\n  }\r\n\r\n  getQuote() {\r\n    return this.getRequest(\"https://api.quotable.io/random\")\r\n  }\r\n\r\n  getRequest(url) {\r\n    return axios.get(url)\r\n      .then(this.status)\r\n      .catch(function (error) {\r\n        // handle error\r\n        console.error(error);\r\n        alert(error)\r\n      })\r\n  }\r\n\r\n}","import React from 'react';\nimport './App.css';\nimport { ApiClient } from './ApiClient'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      content: \"\",\n      author: \"\",\n      tags: [],\n      fetching: false,\n      authors: [],\n      lastItemIndex: 0,\n      pageSize: 20,\n      authorId: undefined\n    }\n    this.apiClient = new ApiClient()\n  }\n\n  updateQuote(response) {\n    this.setState({\n      content: response.content,\n      author: response.author,\n      tags: response.tags\n    })\n  }\n\n  refreshQuote() {\n    this.setState({\n      content: \"....loading\",\n      author: \"\",\n      tags: [],\n      fetching: true\n    })\n\n    if (this.state.authorId) {\n      this.apiClient.getquoteByAuthor(this.state.authorId)\n      .then((response) => { this.updateQuote(response.data.results[Math.floor(Math.random()*response.data.count)]) })\n      .finally(() => {\n        this.setState({\n          fetching: false\n        })\n      })\n  } else {\n    this.apiClient.getQuote()\n    .then((response) => { this.updateQuote(response.data) })\n    .finally(() => {\n      this.setState({\n        fetching: false\n      })\n  })\n}\n  }\n\n  listAuthors(skip=0) {\n    if (skip < 0) {\n      skip = 0\n    }\n\n    this.apiClient.getAuthors(skip, this.state.pageSize)\n      .then((response) => { this.updateAuthors(response.data) })\n  }\n\n  updateAuthors(response) {\n    const authors = response.results.map((author) => {\n      console.log(author);\n      return ({ name: author.name, count: author.quoteCount, id: author._id })\n    })\n    this.setState({\n      authors,\n      lastItemIndex: response.lastItemIndex\n    })\n  }\n\n  refreshAuthors(next) {\n    if (next) {\n      this.listAuthors(this.state.lastItemIndex)\n    } else {\n      this.listAuthors(this.state.lastItemIndex - (2*this.state.pageSize))\n    }\n\n  }\n\n  refreshPagination(e) {\n    this.setState({\n      pageSize: e.target.value\n    }, () => this.listAuthors())\n  }\n\n  selectAuthor(authorId) {\n    this.selectState({\n      authorId\n    }, () => this.refreshQuote() )\n  }\n\n  makeAuthorTable() {\n    return this.state.authors.map((author, i) => {\n      return (\n        <tr key={i}>\n          <td style={{ backgroundColor: (author.id === this.state.authorId) ? \"green\" : \"\"}}>\n            <a onClick={() => this.selectAuthor(author.id)}>{author.name}</a>\n          </td>\n          <td>\n            {author.count}\n          </td>\n        </tr>\n      )\n    })\n  }\n\n  componentDidMount() {\n    this.refreshQuote();\n    this.listAuthors();\n  }\n\n  render() {\n    return (\n      <>\n        <h1>Quote of the day</h1>\n        <p><b>Content:</b> {this.state.content} </p>\n        <p><b>Author:</b> {this.state.author} </p>\n        <p><b>Tags:</b> {this.state.tags.join(\", \")}</p>\n        <button disabled={this.state.fetching} onClick={() => this.refreshQuote()}>New Quote</button>\n\n        <table>\n          <thead>\n            <tr>\n              <th>\n                Name\n              </th>\n              <th>\n                No of quotes\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.makeAuthorTable()}\n          </tbody>\n        </table>\n        <button onClick={() => this.refreshAuthors(false)}>Previous</button>\n        <button onClick={() => this.refreshAuthors(true)}>Next</button>\n        <br />Page size <br />\n        <select onChange={(e) => this.refreshPagination(e)} value={this.state.pageSize}>\n          <option value=\"10\">10</option>\n          <option value=\"20\">20</option>\n          <option value=\"30\">30</option>\n        </select>\n      </>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}